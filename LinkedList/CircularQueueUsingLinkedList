#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* prev;
    Node* next;
    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};
class Deque {
private:
    Node* front;
    Node* rear;
    int size;
public:
    Deque() : front(nullptr), rear(nullptr), size(0) {}
    // Function to check if the deque is empty
    bool isEmpty() {
        return front == nullptr;
    }
    // Function to insert an element at the front
    void insertFront(int value) {
        Node* newNode = new Node(value);
        if (isEmpty()) {
            front = rear = newNode;
        }
        else {
            newNode->next = front;
            front->prev = newNode;
            front = newNode;
        }
        size++;
        cout << "Inserted at front: " << value << endl;
    }
    // Function to insert an element at the rear
    void insertRear(int value) {
        Node* newNode = new Node(value);
        if (isEmpty()) {
            front = rear = newNode;
        }
        else {
            rear->next = newNode;
            newNode->prev = rear;
            rear = newNode;
        }
        size++;
        cout << "Inserted at rear: " << value << endl;
    }
    // Function to delete an element from the front
    int deleteFront() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return -1;
        }
        int value = front->data;
        Node* temp = front;
        front = front->next;

        if (front) {
            front->prev = nullptr;
        }
        else {
            rear = nullptr;  // If there was only one element
        }
        delete temp;
        size--;
        cout << "Deleted from front: " << value << endl;
        return value;
    }
        // Function to delete an element from the rear
    int deleteRear() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return -1;
        }
        int value = rear->data;
        Node* temp = rear;
        rear = rear->prev;

        if (rear) {
            rear->next = nullptr;
        }
        else {
            front = nullptr;  // If there was only one element
        }
        delete temp;
        size--;
        cout << "Deleted from rear: " << value << endl;
        return value;
    }
    // Function to get the front element
    int getFront() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return -1;
        }
        return front->data;
    }
    // Function to get the rear element
    int getRear() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return -1;
        }
        return rear->data;
    }
    // Function to display the deque elements
    void display() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return;
        }
        Node* temp = front;
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
    // Function to get the size of the deque
    int getSize() {
        return size;
    }
};
int main() {
    Deque deque;
    deque.insertFront(10);
    deque.insertRear(20);
    deque.insertFront(5);
    deque.insertRear(30);
    cout << "Deque: ";
    deque.display();
    cout << "Front element: " << deque.getFront() << endl;
    cout << "Rear element: " << deque.getRear() << endl;
    deque.deleteFront();
    deque.deleteRear();
    cout << "Deque after deletions: ";
    deque.display();
    cout << "Front element: " << deque.getFront() << endl;
    cout << "Rear element: " << deque.getRear() << endl;
    return 0;
}


